#!KAMAILIO

children = 8

loadmodule "tm"
loadmodule "sl"
loadmodule "rr"
loadmodule "tmx"
loadmodule "pv"
loadmodule "xlog"
loadmodule "corex"
loadmodule "kex"
loadmodule "cfgutils"
loadmodule "textops"
loadmodule "debugger"
loadmodule "ctl"
loadmodule "siputils"


modparam("xlog", "prefix", "$ci $rm:$cs ")
modparam("xlog", "prefix_mode", 1)

modparam("tm", "contacts_avp", "tm_contacts")
modparam("tm", "contact_flows_avp", "tm_contact_flows")

request_route {
    xinfo("[$ru] recieved\n");

    route(CANCELS_AND_RETRANSMISSIONS);
    route(WITHINDLG);

    remove_hf("Route");
    if (is_method("INVITE")) {
        record_route();
    }

    $rd = "target1";

    route("RELAY");
}


route[CANCELS_AND_RETRANSMISSIONS] {
    # CANCEL processing
    if ( is_method("CANCEL") ) {
        if ( t_check_trans() ) {
            xinfo("Relaying CANCEL message\n");
            t_relay();

            exit;
        }
        xwarn("CANCEL with no matched transaction. Discard and exit\n");
        exit;
    }

    # handle retransmissions
    if ( !is_method("ACK") ) {
        if ( t_precheck_trans() ) {
            xinfo("Retransmission. Message being handled by another process. "
                  "call t_check_trans() and exit.\n");
            t_check_trans();
            exit;
        }

        if ( t_check_trans() ) {
            xinfo("Messsage belongs to existing transaction. Handled with "
                  "t_check_trans()\n");
        }
    }
}


route[WITHINDLG] {
    if ( !has_totag() ) {
        return;
    }


    if ( loose_route() ) {
        xinfo("In dialog message with loose routing - Relay\n");
        route("RELAY");
        exit;
    }

    if ( is_method("ACK") ) {
        xinfo("In dialog ACK. Try t_check_trans() or discard and exit\n");
        if ( t_check_trans() ) {
            remove_hf("Proxy-Authenticate");
            route("RELAY");
            exit;
        }
        else {
            xinfo("ACK without matching transaction. Ignore and discard\n");
            exit;
        }
    }

    xerr("In -dialog message without loose route. Reply '404 Not here' and "
         "exit\n");
    sl_send_reply("404", "Not Here");
    exit;
}


route[MESSAGE_TYPE] {
    ## $var here because it's always reset and only used in this route block
    $var(mt) = "unknown";

    if ( $mt == 1 ) {
        $var(mt) = "request";
    }
    else if ( $mt == 2 ) {
        $var(mt) = "reply";
    }
}


route[RELAY] {
    if ( !t_is_set("failure_route") ) {
        t_on_failure("MANAGE_FAILURE");
    }

    t_on_reply("MANAGE_REPLY");
    t_on_branch("MANAGE_BRANCH");
    t_set_fr(5000);
    t_relay();
    exit;
}


route[LOGGING] {
    route("MESSAGE_TYPE");
    xnotice("$vn(route):\n");
    xinfo("$vn(route) Message type: [$var(mt)]\n");
    xinfo("$vn(route) $$var(reply_route)   [$var(reply_route)]\n");
    xinfo("$vn(route) $$avp(reply_route)   [$avp(reply_route)]\n");
    xinfo("$vn(route) $$var(onreply_route) [$var(onreply_route)]\n");
    xinfo("$vn(route) $$avp(onreply_route) [$avp(onreply_route)]\n");
    xinfo("\n");
    $var(mt) = "unknown";
    $vn(route) = $null;
}

reply_route {
    $var(reply_route) = "reply_route VAR";
    $avp(reply_route) = "reply_route AVP";

    $vn(route) = $cfg(route);
    route("LOGGING");
}


onreply_route[MANAGE_REPLY] {
    $var(onreply_route) = "onreply_route VAR";
    $avp(onreply_route) = "onreply_route AVP";

    $vn(route) = $cfg(route);
    route("LOGGING");
}


branch_route[MANAGE_BRANCH] {
    $vn(route) = $cfg(route);
    route("LOGGING");
}


failure_route[MANAGE_FAILURE] {
    $vn(route) = $cfg(route);
    route("LOGGING");

    $rd = "target2";
    t_on_failure("FINAL_FAILURE");
    route("RELAY");
}


failure_route[FINAL_FAILURE] {
    $vn(route) = $cfg(route);
    route("LOGGING");

    $rd = "target2";
}


